{"version":3,"sources":["reducer/quizReducer.js","reducer/types.js","helpers/misc.js","config/constants.js","hooks/useQuiz.js","context/QuizContext.js","components/ProgressBar/ProgressBar.js","components/ThankYouScreen/ThankYouScreen.js","components/TooManyIncorrectAnswers/TooManyIncorrectAnswers.js","components/Question/Question.js","components/QuizView/QuizView.js","App.js","serviceWorker.js","index.js"],"names":["quizReducer","state","action","type","loading","hasLoaded","quizzes","payload","answers","inCorrectAnswerCount","current","correctAnswerCount","notificationModal","props","callback","Swal","fire","then","generateInitialQuizzesData","initialData","indexes","limit","arr","length","r","Math","floor","random","indexOf","push","generateRandomArrayOfNumbers","map","index","parseResults","record","name","first","last","imageUrl","picture","large","useQuiz","useReducer","dispatch","useEffect","fetch","res","json","data","results","parsedResults","result","QuizContext","createContext","QuizProvider","Provider","Consumer","ProgressBar","toggleColor","useContext","progress","BorderLinearProgress","withStyles","root","height","backgroundColor","lighten","bar","borderRadius","LinearProgress","classes","makeStyles","theme","flexGrow","margin","spacing","useStyles","correctPercentage","toFixed","className","variant","color","value","ThankYouScreen","href","TooManyIncorrectAnswers","Question","quiz","showThankYouComponent","showTooManyIncorrectAnswers","Paper","m","elevation","alt","src","Autocomplete","key","autoComplete","autoHighlight","options","getOptionLabel","option","renderInput","params","TextField","onChange","_","icon","title","text","imageAlt","html","CircularProgress","QuizView","App","useState","toggleView","setToggleView","Container","Typography","align","paragraph","Button","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ce46148f.chunk.js","sourcesContent":["import {\n  FETCH,\n  INITIAL_QUIZZES,\n  SET_ANSWERS,\n  SET_CORRECT_ANSWER,\n  SET_INCORRECT_ANSWER\n} from './types';\n\nfunction quizReducer(state, action) {\n  switch (action.type) {\n    case FETCH:\n      return {\n        ...state,\n        loading: true,\n        hasLoaded: false\n      };\n    case INITIAL_QUIZZES:\n      return {\n        ...state,\n        quizzes: action.payload,\n        loading: false,\n        hasLoaded: true\n      };\n    case SET_ANSWERS:\n      return {\n        ...state,\n        answers: action.payload\n      };\n    case SET_INCORRECT_ANSWER:\n      return {\n        ...state,\n        inCorrectAnswerCount: state.inCorrectAnswerCount + 1,\n        current: state.current + 1\n      };\n    case SET_CORRECT_ANSWER:\n      return {\n        ...state,\n        correctAnswerCount: state.correctAnswerCount + 1,\n        current: state.current + 1\n      };\n    default:\n      return state;\n  }\n}\n\nexport default quizReducer;\n","export const FETCH = 'FETCH';\nexport const SET_ANSWERS = 'SET_ANSWERS';\nexport const INITIAL_QUIZZES = 'INITIAL_QUIZZES';\nexport const INCREASE_CURRENT_INDEX = 'INCREASE_CURRENT_INDEX';\nexport const SET_CORRECT_ANSWER = 'SET_CORRECT_ANSWER';\nexport const SET_INCORRECT_ANSWER = 'SET_INCORRECT_ANSWER';\n","import { MAX_ITEMS_PER_QUIZ } from '../config/constants';\nimport Swal from 'sweetalert2';\n\nexport function notificationModal(props, callback) {\n  return Swal.fire({ ...props }).then(() => callback());\n}\n\nfunction generateRandomArrayOfNumbers(limit = MAX_ITEMS_PER_QUIZ) {\n  const arr = [];\n  while (arr.length < limit) {\n    const r = Math.floor(Math.random() * 100) + 1;\n    if (arr.indexOf(r) === -1) arr.push(r);\n  }\n  return arr;\n}\n\nexport function generateInitialQuizzesData(initialData) {\n  const indexes = generateRandomArrayOfNumbers();\n  return initialData.length && indexes.map((index) => initialData[index]);\n}\n\nexport function parseResults(record) {\n  return {\n    name: `${record.name.first} ${record.name.last}`,\n    imageUrl: record.picture.large\n  };\n}\n","export const MAX_ITEMS_PER_QUIZ = 50;\nexport const API_URL = 'https://randomuser.me/api/?results=100';\n","import { useEffect, useReducer } from 'react';\nimport quizReducer from '../reducer/quizReducer';\nimport { generateInitialQuizzesData, parseResults } from '../helpers/misc';\nimport { API_URL } from '../config/constants';\nimport { FETCH, INITIAL_QUIZZES, SET_ANSWERS } from '../reducer/types';\n\nfunction useQuiz() {\n  const [state, dispatch] = useReducer(quizReducer, {\n    correctAnswerCount: 0,\n    inCorrectAnswerCount: 0,\n    quizzes: [],\n    answers: [],\n    current: 0,\n    loading: false,\n    hasLoaded: false\n  });\n\n  useEffect(() => {\n    dispatch({ type: FETCH });\n    fetch(API_URL)\n      .then((res) => res.json())\n      .then((data) => {\n        const { results } = data;\n        const parsedResults = results.length && results.map(parseResults);\n        const quizzes = generateInitialQuizzesData(parsedResults);\n        dispatch({\n          type: INITIAL_QUIZZES,\n          payload: quizzes\n        });\n\n        const answers = parsedResults.map((result) => result.name);\n\n        dispatch({\n          type: SET_ANSWERS,\n          payload: answers\n        });\n      });\n  }, []);\n\n  return {\n    state,\n    dispatch\n  };\n}\n\nexport default useQuiz;\n","import { createContext } from 'react';\n\nconst QuizContext = createContext();\n\nexport const QuizProvider = QuizContext.Provider;\nexport const QuizConsumer = QuizContext.Consumer;\n\nexport default QuizContext;\n","import React, { useContext, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { LinearProgress } from '@material-ui/core';\nimport { lighten, makeStyles, withStyles } from '@material-ui/core/styles';\n\nimport { MAX_ITEMS_PER_QUIZ } from '../../config/constants';\nimport QuizContext from '../../context/QuizContext';\n\nfunction ProgressBar({ toggleColor = false }) {\n  const { state } = useContext(QuizContext);\n  const { current, correctAnswerCount } = state;\n  const progress = current + 1;\n\n  const BorderLinearProgress = withStyles({\n    root: {\n      height: 10,\n      backgroundColor: toggleColor ? '#b2dfdb' : lighten('#ff6c5c', 0.5)\n    },\n    bar: {\n      borderRadius: 20,\n      backgroundColor: toggleColor ? '#00695c' : '#ff6c5c'\n    }\n  })(LinearProgress);\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1\n    },\n    margin: {\n      margin: theme.spacing(1)\n    }\n  }));\n\n  const classes = useStyles();\n  const correctPercentage = (\n    (correctAnswerCount / MAX_ITEMS_PER_QUIZ) *\n    100\n  ).toFixed();\n\n  return (\n    <Fragment>\n      <h1>\n        {progress} of 50 - <span>{correctPercentage}% of correct answers</span>\n      </h1>\n      <BorderLinearProgress\n        className={classes.margin}\n        variant=\"determinate\"\n        color=\"secondary\"\n        value={(progress / MAX_ITEMS_PER_QUIZ) * 100}\n      />\n    </Fragment>\n  );\n}\n\nProgressBar.propTypes = {\n  toggleColor: PropTypes.bool\n};\n\nexport default ProgressBar;\n","import React, { Fragment } from 'react';\n\nfunction ThankYouScreen() {\n  return (\n    <Fragment>\n      <h2 className=\"thankyou-heading\">Great job!</h2>\n      <p className=\"thankyou-p\">\n        You've tested your FXFamily name knowledge and earned 1 FXLearns point.\n        Please take a screenshot of this results screen and include when you\n        \"Rate + Return\" this resource\n        <a className=\"link\" href=\" https://operationsfx.com/myfx/fxlearns\">\n          {' '}\n          here\n        </a>\n      </p>\n    </Fragment>\n  );\n}\n\nexport default ThankYouScreen;\n","import React, { Fragment } from 'react';\n\nfunction TooManyIncorrectAnswers() {\n  return (\n    <Fragment>\n      <h1> Too many incorrect responses recorded.</h1>\n      <p>Please try again tomorrow!</p>\n      <p>\n        Feel free to use the{' '}\n        <a\n          className=\"link\"\n          href=\"https://webpagefx.mangoapps.com/sites/peoples/people_directory?limit=20\"\n        >\n          Mango Directory{' '}\n        </a>\n        as a study resource.\n      </p>\n    </Fragment>\n  );\n}\n\nexport default TooManyIncorrectAnswers;\n","import React, { useContext, Fragment } from 'react';\nimport { Paper, CircularProgress, TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\n\nimport ProgressBar from '../ProgressBar';\nimport ThankYouScreen from '../ThankYouScreen';\nimport TooManyIncorrectAnswers from '../TooManyIncorrectAnswers';\nimport QuizContext from '../../context/QuizContext';\nimport { SET_CORRECT_ANSWER, SET_INCORRECT_ANSWER } from '../../reducer/types';\nimport { notificationModal } from '../../helpers/misc';\n\nfunction Question() {\n  const { state, dispatch } = useContext(QuizContext);\n  const {\n    quizzes,\n    answers,\n    current,\n    hasLoaded,\n    correctAnswerCount,\n    inCorrectAnswerCount\n  } = state;\n  const quiz = quizzes[current];\n  const goal = quizzes.length * 0.8; // 80%\n  const incorrectLimit = quizzes.length * 0.2; // 20%;\n  const showThankYouComponent = correctAnswerCount >= goal;\n  const showTooManyIncorrectAnswers = inCorrectAnswerCount > incorrectLimit;\n\n  const handleOnChange = (_, value) => {\n    if (value === quiz.name) {\n      notificationModal(\n        {\n          icon: 'success',\n          title: 'Correct',\n          text: 'You know your co-worker',\n          imageAlt: quiz.name\n        },\n        () => {\n          dispatch({\n            type: SET_CORRECT_ANSWER\n          });\n        }\n      );\n    } else {\n      notificationModal(\n        {\n          icon: 'error',\n          title: 'You got it wrong',\n          html: `<p>Your co-worker's name is: <b>${quiz.name}</b></p>`,\n          imageAlt: quiz.name\n        },\n        () => {\n          dispatch({\n            type: SET_INCORRECT_ANSWER\n          });\n        }\n      );\n    }\n  };\n\n  return (\n    <Fragment>\n      {!hasLoaded ? (\n        <CircularProgress />\n      ) : (\n        <Paper m={1} classes={{ root: 'bg-dark' }} elevation={10}>\n          {showTooManyIncorrectAnswers ? (\n            <TooManyIncorrectAnswers />\n          ) : (\n            <Fragment>\n              <ProgressBar toggleColor={showThankYouComponent} />\n              {showThankYouComponent && <ThankYouScreen />}\n              <img\n                className=\"user-avatar\"\n                alt={quiz && quiz.name}\n                src={quiz && quiz.imageUrl}\n              />\n              <h3>What’s your co-worker’s name?</h3>\n              <Autocomplete\n                classes={{ root: 'auto-complete' }}\n                key={quiz && quiz.name}\n                autoComplete\n                autoHighlight\n                options={answers}\n                getOptionLabel={(option) => option}\n                renderInput={(params) => (\n                  <TextField {...params} variant=\"outlined\" />\n                )}\n                onChange={handleOnChange}\n              />\n            </Fragment>\n          )}\n        </Paper>\n      )}\n    </Fragment>\n  );\n}\n\nexport default Question;\n","import React from 'react';\n\nimport useQuiz from '../../hooks/useQuiz';\nimport { QuizProvider } from '../../context/QuizContext';\nimport Question from '../Question';\n\nfunction QuizView() {\n  const { state, dispatch } = useQuiz();\n  return (\n    <QuizProvider value={{ state, dispatch }}>\n      <Question />\n    </QuizProvider>\n  );\n}\n\nexport default QuizView;\n","import React, { useState } from 'react';\nimport { Container, Paper, Button, Typography } from '@material-ui/core';\n\nimport './index.css';\nimport QuizView from './components/QuizView';\n\nfunction App() {\n  const [toggleView, setToggleView] = useState(false);\n\n  return (\n    <div className=\"container\">\n      <Container>\n        {toggleView ? (\n          <QuizView />\n        ) : (\n          <Paper m={1} classes={{ root: 'bg-dark' }} elevation={10}>\n            <Typography variant=\"h1\" className=\"header\" align=\"center\">\n              FXFamily Member Quiz\n            </Typography>\n            <Typography variant=\"body1\" paragraph>\n              Test your knowledge of our #BestCoworkers' names using this\n              picture quiz! You'll be shown 50 different randomized profile\n              images and asked to correctly identify at least 40. We trust that\n              you will not use any references during the quiz!\n            </Typography>\n            <Typography variant=\"body2\" paragraph>\n              Looking for ways to practice? Follow these ProTips!\n              <br />\n              - Study using the LiveBoard by selecting someone's name to see\n              their profile image. See that person on FXCampus? Greet them using\n              their first name!\n              <br />- Link to{' '}\n              <a className=\"link\" href=\"https://operationsfx.com/liveboard\">\n                Liveboard\n              </a>\n            </Typography>\n            <Button variant=\"contained\" onClick={() => setToggleView(true)}>\n              Start!\n            </Button>\n          </Paper>\n        )}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}